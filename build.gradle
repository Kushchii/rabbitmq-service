plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
    id 'idea'

    // codecheck plugins
    id 'checkstyle'
    id 'jacoco'
    id "com.github.ben-manes.versions" version "${versionsPluginVersion}"
}

group 'com.pdp.transaction'
version '1.0.0'

java {
    sourceCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    implementation {
        resolutionStrategy.failOnVersionConflict()
    }
}

repositories {
    mavenCentral()
    gradlePluginPortal()
    maven {
        url = uri("https://packages.confluent.io/maven/")
    }
}

dependencyManagement {
    imports {
        mavenBom "com.google.cloud:spring-cloud-gcp-dependencies:${springCloudGcpDependenciesVersion}"
    }
}

dependencies {
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    implementation "org.projectlombok:lombok:${lombokVersion}"
    implementation "org.mapstruct:mapstruct:${mapStructVersion}"

    //spring boot starters
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly "org.postgresql:postgresql:${postgresqlVersion}"
    implementation "org.postgresql:r2dbc-postgresql:${r2dbcPostgresVersion}"

    //liquibase
    implementation "org.liquibase:liquibase-core:${liquibaseVersion}"
    implementation 'org.springframework:spring-jdbc'

    // logging
    implementation "com.google.cloud:spring-cloud-gcp-starter-logging"
    implementation "org.codehaus.janino:janino:${janinoVersion}"


    implementation 'org.glassfish.jersey.core:jersey-common:2.27'

    implementation "commons-codec:commons-codec:${commonsCodecVersion}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "io.projectreactor:reactor-test:${reactorTestVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.jeasy:easy-random-core:${easyRandomVersion}"
    testImplementation "org.wiremock:wiremock-standalone:${wiremockVersion}"
    testImplementation "org.testcontainers:postgresql:${testContainersVersion}"

}

compileJava {
    options.compilerArgs << '-Xlint:deprecation'
}

apply from: 'gradle/codeCheckingConfigs.gradle'

bootJar {
    layered {
        enabled = true
        includeLayerTools = false
    }
}
test {
    useJUnitPlatform()
    testLogging {
        events "failed", "passed", "skipped"
    }
}